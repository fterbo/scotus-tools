#!/usr/bin/env python

# Copyright (c) 2018-2020  Floyd Terbo

from __future__ import absolute_import, print_function

import argparse
import datetime
import json
import logging
import os
import os.path
import pprint
import sys

import dateutil.parser

from scotus import util
from scotus.courts import NAMEMAP as LCNAMEMAP
from scotus.exceptions import NoDocketError
import scotus.parse

logging.basicConfig(level=logging.INFO)



def parse_args ():
  parser = argparse.ArgumentParser()
  parser.add_argument("-t", "--term", dest="term", type=int)
  parser.add_argument("-n", "--num", dest="docket_num", type=int)
  parser.add_argument("-A", "--application", dest="application", default=False, action="store_true")
  parser.add_argument("-O", "--original", dest="orig", default=False, action="store_true")
  parser.add_argument("--stop", dest="stop", type=int)
  parser.add_argument("-s", "--scan", dest="scan", action="store_true")
  parser.add_argument("--ifp", dest="ifp", action="store_true")
  parser.add_argument("-l", "--lower", dest="lower", type=str, nargs="*", default=None)
  parser.add_argument("--conference", dest="conference", action="store_true")
  parser.add_argument("--conf-date", dest="conf_date", type=str, default=None)
  parser.add_argument("--relists", dest="relists", action="store_true")
  parser.add_argument("--unknown", dest="unknown", action="store_true")
  parser.add_argument("--root", dest="root", type=str, default=".")
  parser.add_argument("--evt-sum", dest="sum_evt", action="store_true")
  parser.add_argument("--evt-all", dest="all_evt", action="store_true")
  parser.add_argument("--no-qp", dest="no_qp", action="store_true")
  args = parser.parse_args()
  return args



def scan (opts):
  if opts.application:
    ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/A/" % (opts.root, opts.term))
              if not x.startswith(".") and x != "indexes.json"]
  else:
    ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term))
              if not x.startswith(".") and x != "A"]
  ddirs.sort()
  for ddir in ddirs:
    if opts.docket_num:
      if int(ddir) < opts.docket_num:
        continue

    if opts.stop:
      if int(ddir) > opts.stop:
        return
    elif int(ddir) > 4999 and not opts.ifp:
      return

    if opts.application:
      dnum = "A%d" % (ddir)
    else:
      dnum = ddir

    info = util.loadDocket(opts.term, dnum)

    docket_obj = info._docket_data
    if opts.unknown:
      if ("LowerCourt" in docket_obj) and (docket_obj["LowerCourt"]):
        if docket_obj["LowerCourt"] not in LCNAMEMAP.values():
          print("[%s] Unknown Lower Court: %s" % (info.docketstr, docket_obj["LowerCourt"]))
      else:
        if "LowerCourt" not in docket_obj:
          print("[%s] Missing LowerCourt key" % (info.docketstr))
      continue
      
    if opts.lower:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lcabbr in opts.lower:
        if LCNAMEMAP[lcabbr] == docket_obj["LowerCourt"].strip():
          found = True
      if not found:
        continue

    cabbr = None
    for k,v in LCNAMEMAP.items():
      if v == info.lowercourt:
        cabbr = k
    print ("[%7s][%11s][%5s] %s %s" % (info.docketstr, info.casetype, cabbr, info.casename, info.getFlagString()))


def conference (opts):
  conf_date = opts.conf_date
  if not conf_date:
    d = datetime.date.today()
    if d.weekday() == 3:
      conf_date = d
    else:
      conf_date = d + datetime.timedelta(((3 - d.weekday()) + 7) % 7)
  conf_date = conf_date.date()

  if opts.relists:
    print("Relisted Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("---------------------------------------------------------")
  else:
    print("Petitions Considered at Conference on %s" % (conf_date.strftime("%Y-%m-%d")))
    print("------------------------------------------------")

  lower_set = set()
  lower_map = {}
  if opts.lower:
    for cabbr in opts.lower:
      lower_set.add(LCNAMEMAP[cabbr])
      lower_map[cabbr] = LCNAMEMAP[cabbr]
  else:
    lower_map = LCNAMEMAP

  ddirs = [int(x) for x in os.listdir("%s/OT-%d/dockets/" % (opts.root, opts.term))
            if not x.startswith(".") and x != "A"]
  ddirs.sort()
  for ddir in ddirs:
#    if int(ddir) > 4999 and not opts.ifp:
#      return

    jpath = "%s/OT-%d/dockets/%d/docket.json" % (opts.root, opts.term, ddir)
    docket_str = "%d-%d" % (opts.term, ddir)
    if not os.path.exists(jpath):
      continue

    docket_obj = json.loads(open(jpath, "rb").read())
    info = util.DocketStatusInfo(docket_obj)

    if opts.relists:
      if len(info.distributed) < 2:
        continue

      live_dists  = [x for x in info.distributed if not x[2]]
      if len(live_dists) < 2:
        continue

      valid_relist = False
      for idx,dist in enumerate(live_dists[1:]):
        if dist[1] - live_dists[idx][1] < datetime.timedelta(days=15):
          valid_relist = True
      if not valid_relist:
        continue

    if lower_set:
      if not docket_obj["LowerCourt"]:
        continue
      found = False
      for lc in lower_set:
        if lc == info.lowercourt:
          found = True
      if not found:
        continue

    for (edate, cdate, rescheduled) in info.distributed:
      if cdate == conf_date:
        cabbr = None
        for k,v in lower_map.items():
          if v == info.lowercourt:
            cabbr = k
        print ("[%7s][%11s][%5s] %s %s" % (docket_str, info.casetype, cabbr, info.casename, info.getFlagString()))
        break


def getCommonHeader (info):
  hdr = []
  hdr.append("[%s] %s %s" % (info.docketstr, info.casename, info.getFlagString()))
  if info.docket_date:
    hdr.append("  - Docketed %s" % (info.docket_date.strftime("%Y-%m-%d")))
  else:
    hdr.append("  - Docketed <DATE UNSET>")
  if info.related:
    hdr.append("  - RELATED")
    for ri in info.related:
      hdr.append("      (%d-%d, %s)" % (ri[0], ri[1], ri[2]))
  if info.lowercourt:
    hdr.append("  - Lower Court")
    hdr.append("     %s" % (info.lowercourt))
    if info.lowercourt_decision_date:
      hdr.append("     %s - %s" % (info.lowercourt_docket, info.lowercourt_decision_date.strftime("%Y-%m-%d")))
    else:
      hdr.append("     %s" % (info.lowercourt_docket))
  if info.distributed:
    dstrs = []
    for x in info.distributed:
      cdate = x[1].strftime("%Y-%m-%d")
      if x[2]:
        dstrs.append("%s[R]" % (cdate))
      else:
        dstrs.append(cdate)
    hdr.append("  - Distributed: %s" % (", ".join(dstrs)))
  if info.cvsg:
    if info.cvsg_return_date:
      hdr.append("  - CVSG: %s - %s" % (info.cvsg_date.strftime("%Y-%m-%d"),
                                        info.cvsg_return_date.strftime("%Y-%m-%d")))
    else:
      hdr.append("  - CVSG: %s" % (info.cvsg_date.strftime("%Y-%m-%d")))
  if info.recusals:
    hdr.append("  - Recusals: %s" % (", ".join(info.recusals)))
  return hdr
    

def summarize (opts):
  if opts.application:
    dnum = "A%d" % (opts.docket_num)
  elif opts.orig:
    dnum = "22O%d" % (opts.docket_num)
  else:
    dnum = opts.docket_num

  info = util.loadDocket(opts.term, dnum)

  lines = getCommonHeader(info)
  if opts.application:
    lines.append("  - EVENTS")
    for event in info.events:
      lines.append("    %s" % (unicode(event)))
  else:
    if info.cert_amici:
      lines.append("  - Cert Amici")
      for amicus in info.cert_amici:
        lines.append("      %s" % (amicus))
    if opts.sum_evt:
      lines.append("  - Notable Events")
      for event in info.events:
        if event.amicus_brief or event.distributed or event.time_to_file:
          continue
        lines.append("    %s" % (unicode(event)))
    elif opts.all_evt:
      lines.append("  - Events")
      for event in info.events:
        lines.append("    %s" % (unicode(event)))
    else:
      last_order = info._docket_data["ProceedingsandOrder"][-1]
      lines.append("  - Last Order")
      lines.append("     %s - %s" % (last_order["Date"], last_order["Text"]))
    if info.petition_path and not opts.no_qp:
#    qp = scotus.parse.getQP("%s/%s" % (opts.root, info.petition_path))
#    if qp:
#      print("  - QP(1)")
#      print("      %s" % (" ".join(qp)))
#    qp2 = scotus.parse.getQP2("%s/%s" % (opts.root, info.petition_path))
#    if qp2:
#      lines.append("  - QP")
#      lines.append("      %s" % (" ".join(qp2)))
      qptxt = info.getQPText()
      lines.append("  - QP")
      lines.extend(["      %s" % (x) for x in qptxt.split("\n")])

  for line in lines:
    print(line)



if __name__ == '__main__':
  util.setOutputEncoding()

  opts = parse_args()
  if opts.conf_date:
    opts.conf_date = dateutil.parser.parse(opts.conf_date)

  if opts.scan:
    scan(opts)
  elif opts.conference:
    conference(opts)
  else:
    summarize(opts)
